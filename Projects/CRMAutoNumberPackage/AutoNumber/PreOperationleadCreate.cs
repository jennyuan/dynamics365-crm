// <copyright file="PreOperationleadCreate.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>10/28/2018 8:22:52 AM</date>
// <summary>Implements the PreOperationleadCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;

namespace CRMAutoNumberPackage.AutoNumber
{

    /// <summary>
    /// PreOperationleadCreate Plugin.
    /// </summary>    
    public class PreOperationleadCreate: PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreOperationleadCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PreOperationleadCreate(string unsecure, string secure)
            : base(typeof(PreOperationleadCreate))
        {
            
           // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            // TODO: Implement your custom Plug-in business logic.

            // Obtain the execution context from the service provider. 
            IPluginExecutionContext context = localContext.PluginExecutionContext;

            // The InputParameters collection contains all the data passed in the message request. 
            if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
            {
                // Obtain the target entity from the input parameters.     
                Entity entity = (Entity)context.InputParameters["Target"];

                QueryExpression qe = new QueryExpression("lead");

                // Retrieve new_autonumber field     
                qe.ColumnSet = new ColumnSet();
                qe.ColumnSet.Columns.Add("new_autonumber");

                // Order records by autonumber descending (highest autonumber first)      
                OrderExpression oe = new OrderExpression();
                oe.AttributeName = "new_autonumber";
                oe.OrderType = OrderType.Descending;
                qe.Orders.Add(oe);

                // Use paging to return only one record      
                qe.PageInfo = new PagingInfo();
                qe.PageInfo.Count = 1;
                qe.PageInfo.PageNumber = 1;
                qe.PageInfo.PagingCookie = null;

                // Obtain the organization service reference.      
                IOrganizationService service = localContext.OrganizationService;

                // Retrieve first page (one record) of lead records      
                EntityCollection ec = service.RetrieveMultiple(qe);

                // Late bound entity      
                Entity lead = (Entity)ec[0];

                int nextnumber = 1;  // default initial value 

                // Calculate next autonumber value if existing value      
                if (lead.Attributes.Contains("new_autonumber"))
                    nextnumber = (int)lead.Attributes["new_autonumber"] + 1;

                // Add autonumber to entity      
                entity.Attributes.Add("new_autonumber", nextnumber); 
                 
            }
                 
        }
    }
}
